--- Cloudinit.origin.pm	2024-07-19 16:08:55.339448000 +0200
+++ Cloudinit.pm	2024-07-19 16:24:38.083052359 +0200
@@ -167,15 +167,26 @@
     $content .= "iface lo inet loopback\n\n";
 
     my ($searchdomains, $nameservers) = get_dns_conf($conf);
+	my $ostype = $conf->{"ostype"};
+	my $default_dns = '';
+	my $default_search = '';
+	my $dnsinserted = 0; # insert dns just once for the machine
     if ($nameservers && @$nameservers) {
 	$nameservers = join(' ', @$nameservers);
 	$content .= "        dns_nameservers $nameservers\n";
+	$default_dns = $nameservers; # Windows support
     }
     if ($searchdomains && @$searchdomains) {
 	$searchdomains = join(' ', @$searchdomains);
 	$content .= "        dns_search $searchdomains\n";
     }
 
+	if(PVE::QemuServer::windows_version($ostype) && not($dnsinserted)) {
+    $content .= " dns-nameservers $default_dns\n";
+    $content .= " dns-search $default_search\n";
+    $dnsinserted++;
+	}
+
     my @ifaces = grep { /^net(\d+)$/ } keys %$conf;
     foreach my $iface (sort @ifaces) {
 	(my $id = $iface) =~ s/^net//;
@@ -210,20 +221,59 @@
 
     return $content;
 }
+ 
+# Get mac addresses of dhcp nics from conf file
+sub get_mac_addresses {
+     my ($conf) = @_;
+     
+     my $dhcpstring = undef;
+     my @dhcpmacs = ();
+     my @ifaces = grep { /^net(\d+)$/ } keys %$conf;
+     
+     foreach my $iface (sort @ifaces) {
+         (my $id = $iface) =~ s/^net//;
+         my $net = PVE::QemuServer::parse_net($conf->{$iface});
+         next if !$conf->{"ipconfig$id"};
+         my $ipconfig = PVE::QemuServer::parse_ipconfig($conf->{"ipconfig$id"});
+         
+         my $mac = lc $net->{macaddr};
+
+         if (($ipconfig->{ip}) and ($ipconfig->{ip} eq 'dhcp')){
+             push @dhcpmacs, $mac;
+         }
+     }
+
+     if (@dhcpmacs){
+         $dhcpstring = ",\n     \"dhcp\":[";
+         foreach my $mac (@dhcpmacs){
+             if ($mac != $dhcpmacs[-1]){
+                 $dhcpstring .= "\"$mac\",";
+             }
+             else{
+                 $dhcpstring .= "\"$mac\"]";
+             }
+         }
+     }
+     return ($dhcpstring);
+}
 
 sub configdrive2_gen_metadata {
-    my ($user, $network) = @_;
+	my ($conf, $vmid, $user, $network) = @_ ;
 
     my $uuid_str = Digest::SHA::sha1_hex($user.$network);
-    return configdrive2_metadata($uuid_str);
+	return configdrive2_metadata($conf, $vmid, $user, $network);
 }
 
 sub configdrive2_metadata {
-    my ($uuid) = @_;
+	my ($password, $uuid, $hostname, $username, $pubkeys, $network, $dhcpmacs) = @_;
     return <<"EOF";
 {
-     "uuid": "$uuid",
-     "network_config": { "content_path": "/content/0000" }
+    "meta":{
+    	"admin_pass": "$password"$username
+	},
+	"uuid":"$uuid",
+	"hostname":"$hostname",
+	"network_config":{"content_path":"/content/0000"}$pubkeys$dhcpmacs
 }
 EOF
 }
@@ -237,7 +287,7 @@
     $vendor_data = '' if !defined($vendor_data);
 
     if (!defined($meta_data)) {
-	$meta_data = configdrive2_gen_metadata($user_data, $network_data);
+	$meta_data = configdrive2_gen_metadata($conf, $vmid, $user_data, $network_data);
     }
 
     # we always allocate a 4MiB disk for cloudinit and with the overhead of the ISO
